#!/usr/bin/expect --
# -----------------------------------
# harvest.exp
# Adam Wead
# Rock and Roll Hall of Fame
#
# Cribbed from:
#   summonupd.exp
#   Ian Richmond
#
# Description:
#  Logs into Innopac server and retrieves marc records

# Start the internal Expect diagnostics and send it to a file
# exp_internal -f create_dvd_list_diag 0

# Stop the internal diagnostics
# exp_internal 0

#
# Config
#

# Innopac host ip
set hostip "129.22.104.30"

# Innopac usernamd and password (via SSH)
set un "scirc"
set pw "W1NZE"
# Initials and Password, used once you're inside
set initials "axw"
set ipwd "Rhall11"
# FTP Host
set ftphost "framus.dreamhost.com"
set ftpuser "amsterdamftp"
set ftppass "8ypXXFmH"

# Dates
set todaysdate [exec date +%m.%d.%y]
set yesterdate [exec date --date=yesterday +"%m%d%y"]
#set yesterdate [exec date -d "7 days ago" +"%m%d%y"]
set yesterday [exec date --date=yesterday +"%m.%d.%y"]
#set yesterday [exec date -d "3 days ago" +"%m%d%y"]

#set yesterdate "030810"
#set yesterday "03.08.10"
set eaddress "awead@rockhall.org"  ;# e-mail address for Ian
set listnumber "055"            ;# List number - has 100,000
puts "yesterdate = $yesterdate"


# set a general timeout for each command to complete

set timeout 10

# Start the SSH session, 5 possible responses:
#   Option 1 - No SSH connection available
#   Option 2 - Unknown host
#   Option 3 - Not a familiar host
#   Option 4 - Bad username
#   Option 5 - Good connection

spawn /usr/bin/ssh -l $un $hostip

expect {
  "Secure connection to * refused" exit
  "no address associated with name" exit
  "The authenticity of host*can't be established*Are you sure you want
  to continue connecting" exit
  "Permission denied" exit
  "password: "
}

# Good username, now what about the pw?
#  Option 1 - bad pw
#  Option 2 - good username
send "$pw\r"
expect "Permission denied, please try again" {
  send "\r\r"
  exit
} "Choose one (S,D,C,M,*" {
  # Keep on going
}

# Navigate the menu to create lists
send "m"
expect "Choose one (I,A,G,P*"
send "l"
expect "your initials"
send "$initials\r"
expect "your password"
send "$ipwd\r"

# Select the list you have locked and empty it.
expect "Choose one (1*"
send "$listnumber"

# What if the file is already empty?
# Option 1 - file not empty
# Option 2 - file empty
expect "Choose one (T,P,S,L,*" {
  send "n"
  expect "Are you sure you want to delete the current review file? (y/n)"
  send "y"
} "Choose one (1,*" {
  send "2"
}

# Create a new list
expect "Choose one (B,O,C,A,*"
send "b"

# Search criteria
expect "Find BIBLIOGRAPHIC records that satisfy the following conditions"
send "06"
expect "Enter boolean condition"
send "~"
expect "MAT TYPE <>"
send "t"
expect "Enter action"
send "a"
expect "Enter code"
send "06"
expect "Enter boolean condition"
send "~"
expect "MAT TYPE <>"
send "r"
expect "Enter action"
send "a"
expect "Enter code"
send "05"
expect "Enter boolean condition"
send "~"
expect "BIB LVL <>"
send "c"
expect "Enter action"
send "a"
expect "Enter code"
send "03"
expect "LOCATION"
send "="
expect "LOCATION ="
send "rx\r"
expect "Enter action"
send "a"
expect "Enter code"
send "10"
expect "Enter boolean condition"
send ">"
expect "CREATED"
send "100111"
expect "Enter action"
send "s"
expect "What name would you like to give this file of records?"
send "axw-search\r"
# Give the search as much time as it needs
set timeout -1
expect "Press <SPACE> to continue"

# After it's done, back out to main menu
set timeout 10
send " "
expect "Choose one (T,P,S,L,N*"
send "q"
expect "Choose one"
send "q"
expect "Choose one"
send "q"
expect "Choose one"

# From the main menu, output search
# results to file
send "a"
expect "Choose one"
send "m"
expect "your initials"
send "$initials\r"
expect "your password"
send "$ipwd\r"
expect "Choose one (E,B,L,A,*"
send "d"
expect "Choose one"
send "c"
expect "Enter name of file"
send "rhla-daily\r"
expect "File rhla-daily.out already exists!  Overwrite it?" {
  send "y"
  expect "overwrite it?"
  send "y"
  expect "Choose one"
} "Choose one"
send "b"
expect "Choose one"
# Cycle through the pages of results until we see ours
send "f"
set timeout 1
while {1} {
  expect -re "(\[0-9]+) > axw-search" {
    send $expect_out(1,string)
    break
  }
  send "f"
}
expect "Choose one"
send "s"
expect "Are you sure?" {
  send "y"
}
set timeout -1
#while {1} {
#  expect "Are you sure?" {
#    send "y"
#  }
#}
expect "Choose one"
set timeout 10

# quit out and send file via FTP
send "q"
expect "Press <SPACE> to continue"
send " "
expect "Choose one"
send "q"
expect "Press <SPACE> to continue"
send " "
expect "Choose one"
# Cycle through lists of filenames 
send "f"
set timeout 1
while {1} {
  expect -re "(\[0-9]+) > rhla-daily.out" {
    set filenumber $expect_out(1,string)
    break
  }
  send "f"
}
expect "Choose one"
send "s"
expect "Enter file number"
send "$filenumber"
expect "Choose one"
send "+"
expect "Choose one"
send "e"
expect "Enter host name"
send "$ftphost\r"
expect "Username"
send "$ftpuser\r"
send "$ftppass\r"
expect "Choose one"
send "t"
expect "rhla-daily.out"
send "\r"
set timeout 60
expect "Transfer complete"
set timeout 10
send "c"
expect "Choose one"
send "q"
expect "Press <SPACE>"
send " "
expect "Choose one"
send "q"
expect "Choose one"
send "q"
expect "Choose one"
send "q"
expect "Choose one"
send "q"
exit 0

